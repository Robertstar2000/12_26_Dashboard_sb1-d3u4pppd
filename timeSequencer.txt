import { useState, useEffect } from 'react'
import { Switch } from "/components/ui/switch"
import { Label } from "/components/ui/label"
import { Card, CardContent, CardHeader, CardTitle } from "/components/ui/card"

export default function TimeDisplayApp() {
  const [isRealTime, setIsRealTime] = useState(true)
  const [currentTime, setCurrentTime] = useState(new Date())
  const [workingTime, setWorkingTime] = useState(new Date())
  const [showRedDot, setShowRedDot] = useState(false)
  const [showGreenDot, setShowGreenDot] = useState(false)
  const [showBlueDot, setShowBlueDot] = useState(false)

  useEffect(() => {
    const realTimeInterval = setInterval(() => {
      const newCurrentTime = new Date()
      setCurrentTime(newCurrentTime)

      if (isRealTime) {
        setWorkingTime(newCurrentTime)
      }
    }, 1000)

    return () => clearInterval(realTimeInterval)
  }, [isRealTime])

  useEffect(() => {
    if (!isRealTime) {
      const testTimeInterval = setInterval(() => {
        const newWorkingTime = new Date(workingTime.getTime() + 3600000) // 1 hour in milliseconds
        setWorkingTime(newWorkingTime)
      }, 1000) // 1 second for 1 hour in test time

      return () => clearInterval(testTimeInterval)
    }
  }, [isRealTime, workingTime])

  useEffect(() => {
    const checkTimeChanges = (prevTime: Date, newTime: Date) => {
      const prevHour = prevTime.getHours()
      const newHour = newTime.getHours()
      const prevDate = prevTime.getDate()
      const newDate = newTime.getDate()
      const prevMonth = prevTime.getMonth()
      const newMonth = newTime.getMonth()

      if (prevHour !== newHour) {
        setShowRedDot(true)
        setTimeout(() => setShowRedDot(false), 500) // 0.5 seconds
      }

      if (prevDate !== newDate) {
        setShowGreenDot(true)
        setTimeout(() => setShowGreenDot(false), 2000) // 2 seconds
      }

      if (prevMonth !== newMonth) {
        setShowRedDot(true)
        setShowGreenDot(true)
        setShowBlueDot(true)
        setTimeout(() => {
          setShowRedDot(false)
          setShowGreenDot(false)
          setShowBlueDot(false)
        }, 2000) // 2 seconds
      }
    }

    if (!isRealTime) {
      const prevWorkingTime = new Date(workingTime.getTime() - 3600000) // 1 hour ago
      checkTimeChanges(prevWorkingTime, workingTime)
    } else {
      const prevCurrentTime = new Date(currentTime.getTime() - 1000) // 1 second ago
      checkTimeChanges(prevCurrentTime, currentTime)
    }
  }, [isRealTime, workingTime, currentTime])

  return (
    <Card className="w-full max-w-4xl mx-auto mt-10">
      <CardHeader>
        <CardTitle className="text-2xl font-bold">Time Display App</CardTitle>
      </CardHeader>
      <CardContent className="flex items-center justify-between">
        <div className="flex flex-col items-center">
          <Label>Real-Time</Label>
          <p className="text-lg font-semibold">{currentTime.toLocaleString()}</p>
        </div>
        <div className="flex items-center space-x-4">
          <Label htmlFor="toggle" className="text-lg font-semibold">
            {isRealTime ? 'Real-Time Mode' : 'Test-Time Mode'}
          </Label>
          <Switch
            id="toggle"
            checked={isRealTime}
            onCheckedChange={(checked) => setIsRealTime(checked)}
            className="bg-gray-200 data-[state=checked]:bg-blue-600"
          />
        </div>
        <div className="flex flex-col items-center">
          <Label>Working-Time</Label>
          <p className="text-lg font-semibold">{workingTime.toLocaleString()}</p>
        </div>
        <div className="flex items-center space-x-2">
          {showRedDot && <div className="w-4 h-4 bg-red-500 rounded-full"></div>}
          {showGreenDot && <div className="w-4 h-4 bg-green-500 rounded-full"></div>}
          {showBlueDot && <div className="w-4 h-4 bg-blue-500 rounded-full"></div>}
        </div>
      </CardContent>
    </Card>
  )
}
